{"version":3,"file":"496.7d618408e7c3c29b.js","mappings":"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","names":["i0","ModalAltaComponent","constructor","dialogRef","formBuilder","abmService","funtionCallService","zone","data","this","funciones","push","name","description","parameters","type","properties","ngOnDestroy","subscription","unsubscribe","removeFunctions","ngOnInit","addFunctions","functionReturned$","subscribe","next","run","length","includes","JSON","parse","trim","saveEleccion","closeModal","error","console","log","eleccion","undefined","form","group","nombre","Validators","required","fecha","patchValue","valid","value","id","update","Swal","icon","title","text","stringify","close","nuevaEleccion","Eleccion","create","event","stopPropagation","preventDefault","t","i1","i2","i3","i4","MAT_DIALOG_DATA","fesm2022_core","Xpm","selectors","viewQuery","rf","ctx","provide","MAT_DATE_LOCALE","useValue","decls","vars","consts","template","ModalAltaComponent_mat_error_4_Template","$event","controls","hasError","_r1","invalid","element_r8","element_r9","element_r10","_r12","$implicit","ctx_r11","abrirModalActualizar","ctx_r13","borrarEleccion","ctx_r14","redirigirSetupEleccion","EleccionesComponent","dialog","router","setupService","functionCallingService","displayedColumns","elecciones","loadData","responseObject","arguments","Error","abrirModalAgregar","getAllEntity","map","x","Object","assign","fechaEleccion","isValidDate","Date","open","width","panelClass","afterClosed","result","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","isConfirmed","delete","res","err","e","seleccionarEleccion","navigate","dateString","match","date","isNaN","getTime","i5","EleccionesComponent_th_5_Template","EleccionesComponent_td_6_Template","EleccionesComponent_th_8_Template","EleccionesComponent_td_9_Template","EleccionesComponent_th_11_Template","EleccionesComponent_td_12_Template","EleccionesComponent_tr_13_Template","EleccionesComponent_tr_14_Template","ModalCompaneroComponent","apellido","dni","direccion","tel","companero","saveCompanero","c","Companero","ModalCompaneroComponent_mat_error_4_Template","ModalCompaneroComponent_mat_error_7_Template","ModalCompaneroComponent_mat_error_10_Template","ModalCompaneroComponent_mat_error_13_Template","ModalCompaneroComponent_mat_error_16_Template","element_r14","element_r15","element_r16","element_r17","element_r18","element_r19","_r21","ctx_r20","ctx_r22","CompanerosComponent","abmServices","companeros","CompanerosComponent_th_5_Template","CompanerosComponent_td_6_Template","CompanerosComponent_th_8_Template","CompanerosComponent_td_9_Template","CompanerosComponent_th_11_Template","CompanerosComponent_td_12_Template","CompanerosComponent_th_14_Template","CompanerosComponent_td_15_Template","CompanerosComponent_th_17_Template","CompanerosComponent_td_18_Template","CompanerosComponent_th_20_Template","CompanerosComponent_td_21_Template","CompanerosComponent_tr_22_Template","CompanerosComponent_tr_23_Template","ModalEscuelasComponent","escuela","saveEscuela","Escuela","ModalEscuelasComponent_mat_error_4_Template","ModalEscuelasComponent_mat_error_7_Template","EscuelasComponent","escuelas","escula","EscuelasComponent_th_5_Template","EscuelasComponent_td_6_Template","EscuelasComponent_th_8_Template","EscuelasComponent_td_9_Template","EscuelasComponent_th_11_Template","EscuelasComponent_td_12_Template","EscuelasComponent_tr_13_Template","EscuelasComponent_tr_14_Template","CandidatosModalComponent","candidato","saveCandidato","Candidato","CandidatosModalComponent_mat_error_4_Template","CandidatosModalComponent_mat_error_7_Template","borrarCandidato","CandidatosComponent","candidatos","CandidatosComponent_th_5_Template","CandidatosComponent_td_6_Template","CandidatosComponent_th_8_Template","CandidatosComponent_td_9_Template","CandidatosComponent_th_11_Template","CandidatosComponent_td_12_Template","CandidatosComponent_tr_13_Template","CandidatosComponent_tr_14_Template","ModalPartidosComponent","partido","savePartido","p","Partido","ModalPartidosComponent_mat_error_4_Template","PartidosComponent","partidos","PartidosComponent_th_5_Template","PartidosComponent_td_6_Template","PartidosComponent_th_8_Template","PartidosComponent_td_9_Template","PartidosComponent_th_11_Template","PartidosComponent_td_12_Template","PartidosComponent_tr_13_Template","PartidosComponent_tr_14_Template","ModalCargosAltaComponent","cargo","saveCargo","Cargo","ModalCargosAltaComponent_mat_error_4_Template","element_r6","element_r7","_r9","ctx_r8","abrirModal","ctx_r10","borrarCargo","routes","path","component","MesasComponent","CargosComponent","CargosComponent_th_5_Template","CargosComponent_td_6_Template","CargosComponent_th_8_Template","CargosComponent_td_9_Template","CargosComponent_tr_10_Template","CargosComponent_tr_11_Template","AbmRoutingModule","oAB","cJS","RouterModule","forChild","AbmModule","CommonModule","MaterialModule","FormsModule","ReactiveFormsModule"],"sourceRoot":"webpack:///","sources":["./src/app/dash-board/abm/elecciones/modal-alta/modal-alta.component.html","./src/app/dash-board/abm/elecciones/modal-alta/modal-alta.component.ts","./src/app/dash-board/abm/elecciones/elecciones.component.html","./src/app/dash-board/abm/elecciones/elecciones.component.ts","./src/app/dash-board/abm/companeros/modal-alta/modal-alta.component.html","./src/app/dash-board/abm/companeros/modal-alta/modal-alta.component.ts","./src/app/dash-board/abm/companeros/companeros.component.html","./src/app/dash-board/abm/companeros/companeros.component.ts","./src/app/dash-board/abm/escuelas/modal-escuelas/modal-escuelas.component.html","./src/app/dash-board/abm/escuelas/modal-escuelas/modal-escuelas.component.ts","./src/app/dash-board/abm/escuelas/escuelas.component.html","./src/app/dash-board/abm/escuelas/escuelas.component.ts","./src/app/dash-board/abm/candidatos/candidatos-modal/candidatos-modal.component.html","./src/app/dash-board/abm/candidatos/candidatos-modal/candidatos-modal.component.ts","./src/app/dash-board/abm/candidatos/candidatos.component.html","./src/app/dash-board/abm/candidatos/candidatos.component.ts","./src/app/dash-board/abm/partidos/modal-partidos/modal-partidos.component.html","./src/app/dash-board/abm/partidos/modal-partidos/modal-partidos.component.ts","./src/app/dash-board/abm/partidos/partidos.component.html","./src/app/dash-board/abm/partidos/partidos.component.ts","./src/app/dash-board/abm/cargos/modal-cargos-alta/modal-cargos-alta.component.html","./src/app/dash-board/abm/cargos/modal-cargos-alta/modal-cargos-alta.component.ts","./src/app/dash-board/abm/cargos/cargos.component.html","./src/app/dash-board/abm/abm-routing.module.ts","./src/app/dash-board/abm/cargos/cargos.component.ts","./src/app/dash-board/abm/abm.module.ts"],"sourcesContent":["\r\n<mat-dialog-content>\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"saveEleccion()\">\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Nombre\" formControlName=\"nombre\">\r\n      <mat-error *ngIf=\"form.controls['nombre'].hasError('required')\">El nombre es requerido</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input  matInput [matDatepicker]=\"picker\" placeholder=\"Fecha\" formControlName=\"fecha\">\r\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n      <mat-datepicker #picker ></mat-datepicker>\r\n    </mat-form-field>\r\n    <div class=\"button-container\">\r\n      <button mat-button type=\"submit\" [disabled]=\"form.invalid\">Guardar</button>\r\n      <button mat-button (click)=\"closeModal($event)\">Cerrar</button>\r\n    </div>\r\n  </form>\r\n\r\n</mat-dialog-content>\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDatepicker } from '@angular/material/datepicker';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Eleccion } from 'src/app/models/Elecciones';\r\nimport Swal from 'sweetalert2';\r\nimport {\r\n  DateAdapter,\r\n  MAT_DATE_FORMATS,\r\n  MAT_DATE_LOCALE,\r\n} from '@angular/material/core';\r\n\r\n\r\nimport { Subscription } from 'rxjs';\r\nimport { FunctionCall } from 'src/app/models/FunctionInterface';\r\nimport { FunctionCallingService } from 'src/app/Shared/services/functionCalling.service';\r\n\r\n@Component({\r\n  selector: 'app-modal-alta',\r\n  templateUrl: './modal-alta.component.html',\r\n  styleUrls: ['./modal-alta.component.css'],\r\n  providers: [{ provide: MAT_DATE_LOCALE, useValue: 'en-GB' }],\r\n})\r\nexport class ModalAltaComponent implements OnInit, OnDestroy {\r\n  @Input() eleccion: Eleccion | undefined; // Instancia de eleccion o undefined para indicar si es un update\r\n  form!: FormGroup;\r\n  @ViewChild('picker') datePicker!: MatDatepicker<any>;\r\n  private funciones: FunctionCall[] = [];\r\n  private subscription!: Subscription;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ModalAltaComponent>,\r\n    private formBuilder: FormBuilder,\r\n    private abmService: CrudService,\r\n    private funtionCallService: FunctionCallingService,\r\n    private zone: NgZone,\r\n    @Inject(MAT_DIALOG_DATA) public data: { eleccion: Eleccion | undefined }\r\n  ) {\r\n    this.funciones.push(\r\n      {\r\n        name: 'guardar',\r\n        description:\r\n          'Save or update the current intance of Eleccion in database and close the dialog.',\r\n        parameters: {\r\n          type: 'object',\r\n          properties: {},\r\n        },\r\n      },\r\n      {\r\n        name: 'cancelar_Cerrar',\r\n        description:\r\n          'Cancel or abort the save or update action and close the dialog',\r\n        parameters: {\r\n          type: 'object',\r\n          properties: {},\r\n        },\r\n      }\r\n    );\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n    this.funtionCallService.removeFunctions(this.funciones);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.funtionCallService.addFunctions(this.funciones);\r\n    this.subscription = this.funtionCallService.functionReturned$.subscribe({\r\n      next: (data: string) => {\r\n        // logica para llamar a las funcion devuelta por el servicio\r\n        this.zone.run(() => {\r\n          if (data.length > 0 && data.includes('name')) {\r\n            const responseObject = JSON.parse(data);\r\n            switch (responseObject.name.trim()) {\r\n              case 'guardar':\r\n                this.saveEleccion();\r\n                break;\r\n              case 'cancelar_Cerrar':\r\n                this.closeModal();\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n        });\r\n      },\r\n      error: (error: any) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n    this.eleccion = this.data.eleccion ? this.data.eleccion : undefined;\r\n    this.form = this.formBuilder.group({\r\n      nombre: ['', Validators.required],\r\n      fecha: ['', Validators.required],\r\n    });\r\n\r\n    if (this.eleccion) {\r\n      // Si se proporciona un valor para eleccion, actualizar los datos del formulario\r\n      this.form.patchValue({\r\n        nombre: this.eleccion.nombre,\r\n        fecha: this.eleccion.fecha,\r\n      });\r\n    }\r\n  }\r\n\r\n  saveEleccion(): void {\r\n    if (this.form.valid) {\r\n      const { nombre, fecha } = this.form.value;\r\n\r\n      if (this.eleccion && this.eleccion.id && this.eleccion.id > 0) {\r\n        // Si hay una instancia de eleccion, se trata de un update\r\n        this.eleccion.nombre = nombre;\r\n        this.eleccion.fecha = fecha;\r\n\r\n        this.abmService.update(this.eleccion).subscribe(\r\n          (data: Eleccion) => {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Actualización exitosa',\r\n              text: JSON.stringify(data),\r\n            });\r\n            this.dialogRef.close({ nombre, fecha });\r\n          },\r\n          (error: any) => {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error',\r\n              text: JSON.stringify(error),\r\n            });\r\n            this.dialogRef.close({ nombre, fecha });\r\n          }\r\n        );\r\n      } else {\r\n        // Si no hay una instancia de eleccion, se trata de una creación\r\n        const nuevaEleccion = new Eleccion();\r\n        nuevaEleccion.nombre = nombre;\r\n        nuevaEleccion.fecha = fecha;\r\n\r\n        this.abmService.create(nuevaEleccion).subscribe(\r\n          (data: Eleccion) => {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Guardado exitoso',\r\n              text: JSON.stringify(data),\r\n            });\r\n            this.dialogRef.close({ nombre, fecha });\r\n          },\r\n          (error: any) => {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error',\r\n              text: JSON.stringify(error),\r\n            });\r\n            this.dialogRef.close({ nombre, fecha });\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  closeModal(event?: Event) {\r\n    event?.stopPropagation();\r\n    event?.preventDefault();\r\n    this.zone.run(() => {\r\n      this.dialogRef.close();\r\n    });\r\n  }\r\n}\r\n","<!-- <button mat-button (click)=\"abrirModalAgregar()\">Agregar</button> -->\r\n<button mat-fab color=\"primary\" class=\"floating-button\" (click)=\"abrirModalAgregar()\">\r\n  <mat-icon>add</mat-icon>\r\n</button>\r\n\r\n<table mat-table [dataSource]=\"elecciones\" class=\"mat-elevation-z8\">\r\n\r\n  <!--- Note that these columns can be defined in any order.\r\n        The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"name\">\r\n    <th mat-header-cell *matHeaderCellDef> Nombre Eleccion </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.nombre}} </td>\r\n  </ng-container>\r\n\r\n  <!-- date Column -->\r\n  <ng-container matColumnDef=\"fecha\">\r\n    <th mat-header-cell *matHeaderCellDef> Fecha Eleccion</th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.fecha}} </td>\r\n  </ng-container>\r\n\r\n <!-- Acciones Column -->\r\n <ng-container matColumnDef=\"acciones\">\r\n  <th mat-header-cell *matHeaderCellDef> Acciones </th>\r\n  <td mat-cell *matCellDef=\"let element\">\r\n    <button mat-icon-button color=\"primary\" (click)=\"abrirModalActualizar(element)\">\r\n      <mat-icon>edit</mat-icon>\r\n    </button>\r\n    <button mat-icon-button color=\"warn\" (click)=\"borrarEleccion(element)\">\r\n      <mat-icon>delete</mat-icon>\r\n    </button>\r\n\r\n    <button mat-icon-button color=\"primary\" (click)=\"redirigirSetupEleccion(element)\">\r\n      <mat-icon>settings</mat-icon>\r\n    </button>\r\n\r\n  </td>\r\n</ng-container>\r\n\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, NgZone, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Eleccion } from 'src/app/models/Elecciones';\r\nimport { ModalAltaComponent } from './modal-alta/modal-alta.component';\r\nimport Swal from 'sweetalert2';\r\nimport { Router } from '@angular/router';\r\nimport { SetupService } from 'src/app/Shared/services/setup.service';\r\nimport { FunctionCallingService } from 'src/app/Shared/services/functionCalling.service';\r\nimport { FunctionCall } from 'src/app/models/FunctionInterface';\r\nimport { Subscription } from 'rxjs';\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-elecciones',\r\n  templateUrl: './elecciones.component.html',\r\n  styleUrls: ['./elecciones.component.css']\r\n})\r\nexport class EleccionesComponent implements OnInit, OnDestroy {\r\n  displayedColumns: string[] = ['name', 'fecha', 'acciones'];\r\n  //dataSource = ELEMENT_DATA;\r\n  elecciones: Eleccion[] = [];\r\n  private funciones: FunctionCall[];\r\n  private subscription!: Subscription;\r\n\r\n  constructor(\r\n    private abmService: CrudService,\r\n    public dialog: MatDialog,\r\n    private router: Router,\r\n    private setupService: SetupService,\r\n    private functionCallingService: FunctionCallingService,\r\n    private zone: NgZone) {\r\n    this.funciones = [\r\n      {\r\n        name: 'agregar_eleccion',\r\n        description: 'Da de alta una eleccion, abre la vista que contiene el formulario para dar de alta una eleccion en la base de datos',\r\n        parameters: {\r\n          type: \"object\",\r\n          properties: {\r\n            nombre: {\r\n              type: \"string\",\r\n              description: \"El nombre con el que se registra la eleccion\"\r\n            },\r\n            fecha: {\r\n              type: \"string\",\r\n              description: \"La fecha de la eleccion en formato yyyy/MM/dd\"\r\n            }\r\n          },\r\n          required: [\"nombre\"]\r\n        },\r\n      }\r\n    ];\r\n    this.functionCallingService.addFunctions(this.funciones);\r\n\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n    this.functionCallingService.removeFunctions(this.funciones);\r\n  }\r\n  ngOnInit(): void {\r\n    this.loadData();\r\n    this.subscription = this.functionCallingService.functionReturned$.subscribe((data: string) => {\r\n      if (data.length > 0 && data.includes(\"name\") && data.includes(\"arguments\")) {\r\n        //obtener funcion\r\n        let responseObject;\r\n        try {\r\n          responseObject = JSON.parse(data);\r\n          //si se puede convertir a objeto, la propiedad name tiene el nombre de la funcion\r\n\r\n          if (typeof responseObject.arguments === 'string') {\r\n            // El valor de arguments es una cadena de texto\r\n            responseObject.arguments = JSON.parse(responseObject.arguments);\r\n          } else if (typeof responseObject.arguments === 'object') {\r\n            // El valor de arguments es un objeto\r\n\r\n          } else {\r\n            // El valor de arguments no es ni una cadena ni un objeto\r\n            console.error('El valor de arguments no es una cadena ni un objeto:', responseObject.arguments);\r\n            throw new Error(\"El valor de arguments no es una cadena ni un objeto\");\r\n          }\r\n          // Obtener los parámetros individuales\r\n          const nombre = responseObject.arguments.nombre ? responseObject.arguments.nombre : \"\";\r\n          const fecha = responseObject.arguments.fecha ? responseObject.arguments.fecha : \"\";\r\n\r\n          // Verificar el nombre de la función y ejecutarla con los argumentos correspondientes\r\n          switch (responseObject.name) {\r\n            case 'agregar_eleccion':\r\n              this.zone.run(() => {\r\n                this.abrirModalAgregar(nombre, fecha);\r\n              });\r\n              break;\r\n            default:\r\n              console.log('La función no está definida o no se proporcionó un nombre válido.');\r\n          }\r\n          console.log(data);\r\n\r\n        } catch (error) {\r\n          console.error(\"Error al parsear la respuesta a json\")\r\n        }\r\n\r\n\r\n\r\n      }\r\n\r\n\r\n    });\r\n  }\r\n\r\n  loadData() {\r\n    const eleccion = new Eleccion();\r\n    this.abmService.getAllEntity(eleccion).subscribe(\r\n      (data: any[]) => {\r\n        this.elecciones = data.map(x => Object.assign(new Eleccion(), x));\r\n      }\r\n    );\r\n  }\r\n\r\n  abrirModalAgregar(nombre?: string, fecha?: string): void {\r\n    let fechaEleccion: any = undefined;\r\n    if (fecha !== undefined && fecha.length > 0) {\r\n      if (this.isValidDate(fecha)) {\r\n        fechaEleccion = new Date(fecha);\r\n      }\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ModalAltaComponent, {\r\n      data: {\r\n        eleccion: { nombre: nombre, fecha: fechaEleccion },\r\n      },\r\n      width: '400px',\r\n      panelClass: 'custom-modal-container', // Agrega la clase CSS personalizada al panelClass,\r\n\r\n    });\r\n\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      this.zone.run(() => {\r\n        console.log('El modal se cerró');\r\n        this.loadData();\r\n      });\r\n    });\r\n\r\n\r\n  }\r\n  abrirModalActualizar(eleccion: Eleccion): void {\r\n\r\n    // Lógica para abrir el modal de actualización y pasar la elección como parámetro\r\n    const dialogRef = this.dialog.open(ModalAltaComponent, {\r\n      data: {\r\n        eleccion: eleccion\r\n      },\r\n      width: '400px', // Especifica el ancho del modal\r\n      panelClass: 'custom-modal-background', // Aplica la clase personalizada al modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      // Lógica para manejar el resultado del modal de actualización\r\n      this.loadData();\r\n      console.log('Resultado del modal de actualización:', result);\r\n    });\r\n\r\n\r\n  }\r\n\r\n  borrarEleccion(eleccion: Eleccion): void {\r\n    Swal.fire({\r\n      title: '¿Estás seguro?',\r\n      text: 'Esta acción no se puede deshacer',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Sí, borrar',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        // Lógica para borrar la elección\r\n        // ...\r\n        this.abmService.delete(eleccion).subscribe(\r\n          res => {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Eleccion borrada',\r\n              text: 'La eleccion ha sido borrada exitosamente'\r\n            });\r\n            this.loadData();\r\n          },\r\n          err => {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error al borrar eleccion',\r\n              text: 'Ha ocurrido un error al borrar la eleccion'\r\n            });\r\n            console.log(err);\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  redirigirSetupEleccion(e: Eleccion) {\r\n    this.setupService.seleccionarEleccion(e);\r\n    this.router.navigate(['/setup-elecccion']);\r\n  }\r\n\r\n  isValidDate(dateString: string): boolean {\r\n    const regEx = /^\\d{4}\\/\\d{2}\\/\\d{2}$/;\r\n    if (!dateString.match(regEx)) {\r\n      return false; // El formato no coincide\r\n    }\r\n    const date = new Date(dateString);\r\n    const isValid = date instanceof Date && !isNaN(date.getTime());\r\n    return isValid;\r\n  }\r\n}\r\n","<mat-dialog-content>\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"saveCompanero()\">\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Apellido\" formControlName=\"apellido\">\r\n      <mat-error *ngIf=\"form.controls['apellido'].hasError('required')\">El apellido es requerido</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Nombres\" formControlName=\"nombre\">\r\n      <mat-error *ngIf=\"form.controls['nombre'].hasError('required')\">Los nombres son requeridos</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"DNI\" formControlName=\"dni\">\r\n      <mat-error *ngIf=\"form.controls['dni'].hasError('required')\">El DNI es requerido</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Dirección\" formControlName=\"direccion\">\r\n      <mat-error *ngIf=\"form.controls['direccion'].hasError('required')\">La dirección es requerida</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Teléfono\" formControlName=\"tel\">\r\n      <mat-error *ngIf=\"form.controls['tel'].hasError('required')\">El teléfono es requerido</mat-error>\r\n    </mat-form-field>\r\n    <div class=\"button-container\">\r\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"form.invalid\">Guardar</button>\r\n      <button mat-button (click)=\"closeModal($event)\">Cerrar</button>\r\n    </div>\r\n  </form>\r\n</mat-dialog-content>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Companero } from 'src/app/models/Companero';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-modal-companero',\r\n  templateUrl: './modal-alta.component.html',\r\n  styleUrls: ['./modal-alta.component.css']\r\n})\r\nexport class ModalCompaneroComponent implements OnInit {\r\n  form: FormGroup;\r\n  companero: Companero | undefined;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    public dialogRef: MatDialogRef<ModalCompaneroComponent>,\r\n    private abmService: CrudService,\r\n    @Inject(MAT_DIALOG_DATA) public data: { companero: Companero | undefined }\r\n  ) {\r\n    this.form = this.formBuilder.group({\r\n      apellido: ['', Validators.required],\r\n      nombre: ['', Validators.required],\r\n      dni: ['', Validators.required],\r\n      direccion: ['', Validators.required],\r\n      tel: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.companero = this.data.companero ? this.data.companero : undefined;\r\n    if (this.companero) {\r\n      this.form.patchValue({\r\n        ...this.companero\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  saveCompanero() {\r\n\r\n    if (this.form.valid) {\r\n      if (this.companero) {\r\n        //Si hay una instancia de companero es un update\r\n        let c: Companero =new Companero();\r\n        c = Object.assign(new Companero, this.form.value);\r\n        c.id = this.companero.id;\r\n        this.abmService.update(c).subscribe(\r\n          (res:Companero)=> {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Actualización exitosa',\r\n              text: 'Los datos del compañero han sido actualizados'\r\n            });\r\n            this.dialogRef.close();\r\n          }\r\n        );\r\n\r\n\r\n      } else {\r\n        //si no hay instancia de companero es un create\r\n        let companero: Companero =new Companero();\r\n         companero = Object.assign(new Companero, this.form.value);\r\n\r\n        this.abmService.create(companero).subscribe(\r\n          (res: Companero)=>{\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Alta exitosa',\r\n              text: `Se genero un nuevo Compañero con ID = ${res.id}`\r\n            });\r\n            this.dialogRef.close();\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  closeModal(event: Event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    // Lógica para cerrar el modal\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<button mat-fab color=\"primary\" class=\"floating-button\" (click)=\"abrirModalAgregar()\">\r\n  <mat-icon>add</mat-icon>\r\n</button>\r\n\r\n<table mat-table [dataSource]=\"companeros\" class=\"mat-elevation-z8\">\r\n  <!--- Note that these columns can be defined in any order.\r\n        The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n  <!-- lastName Column -->\r\n  <ng-container matColumnDef=\"apellido\">\r\n    <th mat-header-cell *matHeaderCellDef>Apellido</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.apellido }}</td>\r\n  </ng-container>\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"nombre\">\r\n    <th mat-header-cell *matHeaderCellDef>Nombre</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.nombre }}</td>\r\n  </ng-container>\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"telefono\">\r\n    <th mat-header-cell *matHeaderCellDef>Telefono</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.tel }}</td>\r\n  </ng-container>\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"direccion\">\r\n    <th mat-header-cell *matHeaderCellDef>Direccion</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.direccion }}</td>\r\n  </ng-container>\r\n\r\n  <!-- date Column -->\r\n  <ng-container matColumnDef=\"dni\">\r\n    <th mat-header-cell *matHeaderCellDef>DNI</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.dni }}</td>\r\n  </ng-container>\r\n\r\n  <!-- Acciones Column -->\r\n  <ng-container matColumnDef=\"acciones\">\r\n    <th mat-header-cell *matHeaderCellDef>Acciones</th>\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <button mat-icon-button color=\"primary\" (click)=\"abrirModalActualizar(element)\">\r\n        <mat-icon>edit</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"warn\" (click)=\"borrarEleccion(element)\">\r\n        <mat-icon>delete</mat-icon>\r\n      </button>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n</table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Eleccion } from 'src/app/models/Elecciones';\r\nimport { ModalCompaneroComponent } from './modal-alta/modal-alta.component';\r\nimport Swal from 'sweetalert2';\r\nimport { Companero } from 'src/app/models/Companero';\r\n\r\n@Component({\r\n  selector: 'app-companeros',\r\n  templateUrl: './companeros.component.html',\r\n  styleUrls: ['./companeros.component.css']\r\n})\r\nexport class CompanerosComponent implements OnInit {\r\n  displayedColumns: string[] = ['apellido', 'nombre', 'telefono', 'direccion', 'dni', 'acciones'];\r\n  companeros: Companero[]= [];\r\n\r\n  constructor(private abmServices: CrudService, public dialog: MatDialog){\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadData();\r\n  }\r\n\r\n  loadData(){\r\n    const companero = new Companero();\r\n\r\n    this.abmServices.getAllEntity(companero).subscribe(\r\n      (res:any[])=>{\r\n        this.companeros = res.map(x=> Object.assign(new Companero(), x));\r\n      }\r\n    );\r\n  }\r\n\r\n  abrirModalAgregar(){\r\n    const dialogRef = this.dialog.open(ModalCompaneroComponent, {\r\n      data: {\r\n        Companero: undefined\r\n      },\r\n      width: '400px', // Especifica el ancho del modal\r\n      panelClass: 'custom-modal-background', // Aplica la clase personalizada al modal\r\n      // Otras opciones del modal...\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      console.log('El modal se cerró');\r\n      // Realizar acciones después de cerrar el modal, como llamar al servicio de ABM\r\n      this.loadData();\r\n    });\r\n  }\r\n\r\n  abrirModalActualizar(c: Companero) {\r\n\r\n    // Lógica para abrir el modal de actualización y pasar la elección como parámetro\r\n    const dialogRef = this.dialog.open(ModalCompaneroComponent, {\r\n      data: {\r\n        companero: c\r\n      },\r\n      width: '400px', // Especifica el ancho del modal\r\n      panelClass: 'custom-modal-background', // Aplica la clase personalizada al modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      // Lógica para manejar el resultado del modal de actualización\r\n      this.loadData();\r\n      console.log('Resultado del modal de actualización:', result);\r\n    });\r\n  }\r\n\r\n  borrarEleccion(c: Companero){\r\n    Swal.fire({\r\n      title: '¿Estás seguro?',\r\n      text: 'Esta acción no se puede deshacer',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Sí, borrar',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        // Lógica para borrar la elección\r\n        // ...\r\n        this.abmServices.delete(c).subscribe(\r\n          res => {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Compañero/a borrado/a',\r\n              text: 'Los datos han sido borrados exitosamente'\r\n            });\r\n            this.loadData();\r\n          },\r\n          err => {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error al borrar Companñero ',\r\n              text: 'Ha ocurrido un error al borrar los datos'\r\n            });\r\n            console.log(err);\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n","<mat-dialog-content>\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"saveEscuela()\">\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Nombres\" formControlName=\"nombre\">\r\n      <mat-error *ngIf=\"form.controls['nombre'].hasError('required')\">Los nombres son requeridos</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Dirección\" formControlName=\"direccion\">\r\n      <mat-error *ngIf=\"form.controls['direccion'].hasError('required')\">La dirección es requerida</mat-error>\r\n    </mat-form-field>\r\n\r\n    <div class=\"button-container\">\r\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"form.invalid\">Guardar</button>\r\n      <button mat-button (click)=\"closeModal($event)\">Cerrar</button>\r\n    </div>\r\n  </form>\r\n</mat-dialog-content>\r\n","import { Component,Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Escuela } from 'src/app/models/Escuela';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-modal-escuelas',\r\n  templateUrl: './modal-escuelas.component.html',\r\n  styleUrls: ['./modal-escuelas.component.css']\r\n})\r\nexport class ModalEscuelasComponent implements OnInit {\r\n  escuela : Escuela | undefined;\r\n  form!: FormGroup;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ModalEscuelasComponent>,\r\n    private formBuilder: FormBuilder,\r\n    private abmService: CrudService,\r\n    @Inject(MAT_DIALOG_DATA) public data: { escuela: Escuela | undefined }\r\n  ) {\r\n    this.escuela = data.escuela;\r\n  }\r\n\r\n  ngOnInit(){\r\n    this.form = this.formBuilder.group({\r\n      nombre: ['', Validators.required],\r\n      direccion: ['', Validators.required]\r\n    });\r\n\r\n    if (this.escuela){\r\n      //si estoy actualizando tengo un isntancia de escuela\r\n      //le asigno los valores al formulario\r\n      this.form.patchValue({...this.escuela});\r\n    }\r\n\r\n  }\r\n\r\n  saveEscuela(){\r\n    if (this.form.valid) {\r\n      if (this.escuela) {\r\n        //si estoy actualizando\r\n        let e = Object.assign(new Escuela(), this.form.value);\r\n        e.id = this.escuela.id;\r\n        this.abmService.update(e).subscribe(\r\n          (res:Escuela)=> {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Actualización exitosa',\r\n              text: 'Los datos de la escuela han sido actualizados'\r\n            });\r\n            this.dialogRef.close();\r\n          }\r\n        );\r\n\r\n      }else{\r\n        //si estoy creando\r\n        let escuela: Escuela =new Escuela();\r\n         escuela = Object.assign(new Escuela, this.form.value);\r\n\r\n        this.abmService.create(escuela).subscribe(\r\n          (res: Escuela)=>{\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Alta exitosa',\r\n              text: `Se genero una nueva Escuela con ID = ${res.id}`\r\n            });\r\n            this.dialogRef.close();\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  closeModal(event: Event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    // Lógica para cerrar el modal\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<!-- <button mat-button (click)=\"abrirModalAgregar()\">Agregar</button> -->\r\n<button mat-fab color=\"primary\" class=\"floating-button\" (click)=\"abrirModalAgregar()\">\r\n  <mat-icon>add</mat-icon>\r\n</button>\r\n\r\n<table mat-table [dataSource]=\"escuelas\" class=\"mat-elevation-z8\">\r\n\r\n  <!--- Note that these columns can be defined in any order.\r\n        The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"nombre\">\r\n    <th mat-header-cell *matHeaderCellDef> Nombre de Escuela </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.nombre}} </td>\r\n  </ng-container>\r\n\r\n  <!-- date Column -->\r\n  <ng-container matColumnDef=\"direccion\">\r\n    <th mat-header-cell *matHeaderCellDef> Direccion</th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.direccion}} </td>\r\n  </ng-container>\r\n\r\n <!-- Acciones Column -->\r\n <ng-container matColumnDef=\"acciones\">\r\n  <th mat-header-cell *matHeaderCellDef> Acciones </th>\r\n  <td mat-cell *matCellDef=\"let element\">\r\n    <button mat-icon-button color=\"primary\" (click)=\"abrirModalActualizar(element)\">\r\n      <mat-icon>edit</mat-icon>\r\n    </button>\r\n    <button mat-icon-button color=\"warn\" (click)=\"borrarEleccion(element)\">\r\n      <mat-icon>delete</mat-icon>\r\n    </button>\r\n  </td>\r\n</ng-container>\r\n\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Eleccion } from 'src/app/models/Elecciones';\r\nimport { Escuela } from 'src/app/models/Escuela';\r\n\r\nimport Swal from 'sweetalert2';\r\nimport { ModalEscuelasComponent } from './modal-escuelas/modal-escuelas.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-escuelas',\r\n  templateUrl: './escuelas.component.html',\r\n  styleUrls: ['./escuelas.component.css']\r\n})\r\nexport class EscuelasComponent implements OnInit {\r\n  displayedColumns: string[] = ['nombre', 'direccion', 'acciones'];\r\n  escuelas: Escuela[] = [];\r\n\r\n  constructor(private abmServices: CrudService, public dialog: MatDialog) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.loadData();\r\n  }\r\n\r\n  loadData() {\r\n    const e = new Escuela();\r\n    this.abmServices.getAllEntity(e).subscribe(\r\n      (data: any[]) => {\r\n        this.escuelas = data.map(x => Object.assign(new Escuela(), x));\r\n\r\n      });\r\n  }\r\n\r\n  abrirModalAgregar(): void {\r\n    const dialogRef = this.dialog.open(ModalEscuelasComponent, {\r\n      data: {\r\n        escula: undefined\r\n      },\r\n      width: '400px', // Especifica el ancho del modal\r\n      panelClass: 'custom-modal-background', // Aplica la clase personalizada al modal\r\n      // Otras opciones del modal...\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      console.log('El modal se cerró');\r\n      // Realizar acciones después de cerrar el modal, como llamar al servicio de ABM\r\n      this.loadData();\r\n    });\r\n  }\r\n\r\n  abrirModalActualizar(escuela: Escuela): void {\r\n\r\n    // Lógica para abrir el modal de actualización y pasar la elección como parámetro\r\n    const dialogRef = this.dialog.open(ModalEscuelasComponent, {\r\n      data: {\r\n        escuela: escuela\r\n      },\r\n      width: '400px', // Especifica el ancho del modal\r\n      panelClass: 'custom-modal-background', // Aplica la clase personalizada al modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      // Lógica para manejar el resultado del modal de actualización\r\n      this.loadData();\r\n      console.log('Resultado del modal de actualización:', result);\r\n    });\r\n  }\r\n\r\n  borrarEleccion(escuela: Escuela): void {\r\n    Swal.fire({\r\n      title: '¿Estás seguro?',\r\n      text: 'Esta acción no se puede deshacer',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Sí, borrar',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        // Lógica para borrar la elección\r\n        // ...\r\n        this.abmServices.delete(escuela).subscribe(\r\n          res => {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Escuela borrada',\r\n              text: 'La escuela ha sido borrada exitosamente'\r\n            });\r\n            this.loadData();\r\n          },\r\n          err => {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error al borrar escuela',\r\n              text: 'Ha ocurrido un error al borrar la escuela'\r\n            });\r\n            console.log(err);\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n","<mat-dialog-content>\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"saveCandidato()\">\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Apellido\" formControlName=\"apellido\">\r\n      <mat-error *ngIf=\"form.controls['apellido'].hasError('required')\">El apellido es requerido</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Nombres\" formControlName=\"nombre\">\r\n      <mat-error *ngIf=\"form.controls['nombre'].hasError('required')\">Los nombres son requeridos</mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <div class=\"button-container\">\r\n      <button class=\"btn-guardar\" mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"form.invalid\">Guardar</button>\r\n      <button class=\"btn-cerrar\" mat-button (click)=\"closeModal($event)\">Cerrar</button>\r\n    </div>\r\n  </form>\r\n</mat-dialog-content>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Candidato } from 'src/app/models/Candidato';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\n@Component({\r\n  selector: 'app-candidatos-modal',\r\n  templateUrl: './candidatos-modal.component.html',\r\n  styleUrls: ['./candidatos-modal.component.css']\r\n})\r\nexport class CandidatosModalComponent implements OnInit {\r\n  form: FormGroup;\r\n  candidato: Candidato | undefined;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    public dialogRef: MatDialogRef<CandidatosModalComponent>,\r\n    private abmService: CrudService,\r\n    @Inject(MAT_DIALOG_DATA) public data: { candidato: Candidato | undefined }\r\n  ) {\r\n    this.form = this.formBuilder.group({\r\n      apellido: ['', Validators.required],\r\n      nombre: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.candidato = this.data.candidato ? this.data.candidato : undefined;\r\n    if (this.candidato) {\r\n      this.form.patchValue({\r\n        ...this.candidato\r\n      })\r\n    }\r\n  }\r\n\r\n  saveCandidato() {\r\n\r\n    if (this.form.valid) {\r\n      if (this.candidato) {\r\n        //Si hay una instancia de candidato es un update\r\n        let c: Candidato =new Candidato();\r\n        c = Object.assign(new Candidato, this.form.value);\r\n        c.id = this.candidato.id;\r\n        this.abmService.update(c).subscribe(\r\n          (res:Candidato)=> {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Actualización exitosa',\r\n              text: 'Los datos del compañero han sido actualizados'\r\n            });\r\n            this.dialogRef.close();\r\n          }\r\n        );\r\n\r\n\r\n      } else {\r\n        //si no hay instancia de candidato es un create\r\n        let candidato: Candidato =new Candidato();\r\n         candidato = Object.assign(new Candidato, this.form.value);\r\n\r\n        this.abmService.create(candidato).subscribe(\r\n          (res: Candidato)=>{\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Alta exitosa',\r\n              text: `Se genero un nuevo Compañero con ID = ${res.id}`\r\n            });\r\n            this.dialogRef.close();\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  closeModal(event: Event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    // Lógica para cerrar el modal\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<button mat-fab color=\"primary\" class=\"floating-button\" (click)=\"abrirModalAgregar()\">\r\n  <mat-icon>add</mat-icon>\r\n</button>\r\n\r\n<table mat-table [dataSource]=\"candidatos\" class=\"mat-elevation-z8\">\r\n  <!--- Note that these columns can be defined in any order.\r\n        The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n  <!-- lastName Column -->\r\n  <ng-container matColumnDef=\"apellido\">\r\n    <th mat-header-cell *matHeaderCellDef>Apellido</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.apellido }}</td>\r\n  </ng-container>\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"nombre\">\r\n    <th mat-header-cell *matHeaderCellDef>Nombre</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.nombre }}</td>\r\n  </ng-container>\r\n\r\n  <!-- Acciones Column -->\r\n  <ng-container matColumnDef=\"acciones\">\r\n    <th mat-header-cell *matHeaderCellDef>Acciones</th>\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <button mat-icon-button color=\"primary\" (click)=\"abrirModalActualizar(element)\">\r\n        <mat-icon>edit</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"warn\" (click)=\"borrarCandidato(element)\">\r\n        <mat-icon>delete</mat-icon>\r\n      </button>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n</table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Candidato } from 'src/app/models/Candidato';\r\nimport { CandidatosModalComponent } from './candidatos-modal/candidatos-modal.component';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-candidatos',\r\n  templateUrl: './candidatos.component.html',\r\n  styleUrls: ['./candidatos.component.css']\r\n})\r\nexport class CandidatosComponent implements OnInit {\r\n  displayedColumns: string[] = ['apellido', 'nombre', 'acciones'];\r\n  candidatos: Candidato[]= [];\r\n\r\n  constructor(private abmServices: CrudService, public dialog: MatDialog){\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadData();\r\n  }\r\n\r\n  loadData(){\r\n    const companero = new Candidato();\r\n\r\n    this.abmServices.getAllEntity(companero).subscribe(\r\n      (res:any[])=>{\r\n        this.candidatos = res.map(x=> Object.assign(new Candidato(), x));\r\n      }\r\n    );\r\n  }\r\n\r\n  abrirModalAgregar(){\r\n    const dialogRef = this.dialog.open(CandidatosModalComponent, {\r\n      data: {\r\n        candidato: undefined\r\n      },\r\n      width: '400px', // Especifica el ancho del modal\r\n      panelClass: 'custom-modal-background', // Aplica la clase personalizada al modal\r\n      // Otras opciones del modal...\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      console.log('El modal se cerró');\r\n      // Realizar acciones después de cerrar el modal, como llamar al servicio de ABM\r\n      this.loadData();\r\n    });\r\n  }\r\n\r\n  abrirModalActualizar(c: Candidato){\r\n    // Lógica para abrir el modal de actualización y pasar la elección como parámetro\r\n    const dialogRef = this.dialog.open(CandidatosModalComponent, {\r\n      data: {\r\n        candidato: c\r\n      },\r\n      width: '400px', // Especifica el ancho del modal\r\n      panelClass: 'custom-modal-background', // Aplica la clase personalizada al modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      // Lógica para manejar el resultado del modal de actualización\r\n      this.loadData();\r\n      console.log('Resultado del modal de actualización:', result);\r\n    });\r\n  }\r\n\r\n  borrarCandidato(c: Candidato){\r\n    Swal.fire({\r\n      title: '¿Estás seguro?',\r\n      text: 'Esta acción no se puede deshacer',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Sí, borrar',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        // Lógica para borrar la elección\r\n        // ...\r\n        this.abmServices.delete(c).subscribe(\r\n          res => {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Candidato/a borrado/a',\r\n              text: 'Los datos han sido borrados exitosamente'\r\n            });\r\n            this.loadData();\r\n          },\r\n          err => {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error al borrar Candidato ',\r\n              text: 'Ha ocurrido un error al borrar los datos'\r\n            });\r\n            console.log(err);\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<mat-dialog-content>\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"savePartido()\">\r\n\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Nombre del Partido\" formControlName=\"nombre\">\r\n      <mat-error *ngIf=\"form.controls['nombre'].hasError('required')\">Los nombres son requeridos</mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <div class=\"button-container\">\r\n      <button class=\"btn-guardar\" mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"form.invalid\">Guardar</button>\r\n      <button class=\"btn-cerrar\" (click)=\"closeModal($event)\">Cerrar</button>\r\n    </div>\r\n  </form>\r\n</mat-dialog-content>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Candidato } from 'src/app/models/Candidato';\r\nimport { Partido } from 'src/app/models/Partido';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-modal-partidos',\r\n  templateUrl: './modal-partidos.component.html',\r\n  styleUrls: ['./modal-partidos.component.css']\r\n})\r\nexport class ModalPartidosComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  partido: Partido | undefined;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    public dialogRef: MatDialogRef<ModalPartidosComponent>,\r\n    private abmService: CrudService,\r\n    @Inject(MAT_DIALOG_DATA) public data: { partido: Partido | undefined }\r\n  ) {\r\n    this.form = this.formBuilder.group({\r\n      nombre: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.partido = this.data.partido ? this.data.partido : undefined;\r\n    if (this.partido) {\r\n      this.form.patchValue({\r\n        ...this.partido\r\n      })\r\n    }\r\n  }\r\n\r\n  savePartido() {\r\n\r\n    if (this.form.valid) {\r\n      if (this.partido) {\r\n        //Si hay una instancia de candidato es un update\r\n        let p: Partido =new Partido();\r\n        p = Object.assign(new Partido, this.form.value);\r\n        p.id = this.partido.id;\r\n        this.abmService.update(p).subscribe(\r\n          (res:Partido)=> {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Actualización exitosa',\r\n              text: 'Los datos del Partido han sido actualizados'\r\n            });\r\n            this.dialogRef.close();\r\n          }\r\n        );\r\n\r\n\r\n      } else {\r\n        //si no hay instancia de candidato es un create\r\n        let partido: Partido =new Partido();\r\n         partido = Object.assign(new Partido, this.form.value);\r\n\r\n        this.abmService.create(partido).subscribe(\r\n          (res: Partido)=>{\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Alta exitosa',\r\n              text: `Se genero un nuevo Partido con ID = ${res.id}`\r\n            });\r\n            this.dialogRef.close();\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  closeModal(event: Event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    // Lógica para cerrar el modal\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n}\r\n","<button mat-fab color=\"primary\" class=\"floating-button\" (click)=\"abrirModalAgregar()\">\r\n  <mat-icon>add</mat-icon>\r\n</button>\r\n\r\n<table mat-table [dataSource]=\"partidos\" class=\"mat-elevation-z8\">\r\n  <!--- Note that these columns can be defined in any order.\r\n        The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n  <!-- lastName Column -->\r\n  <ng-container matColumnDef=\"apellido\">\r\n    <th mat-header-cell *matHeaderCellDef>Apellido</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.apellido }}</td>\r\n  </ng-container>\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"nombre\">\r\n    <th mat-header-cell *matHeaderCellDef>Nombre</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.nombre }}</td>\r\n  </ng-container>\r\n\r\n  <!-- Acciones Column -->\r\n  <ng-container matColumnDef=\"acciones\">\r\n    <th mat-header-cell *matHeaderCellDef>Acciones</th>\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <button mat-icon-button color=\"primary\" (click)=\"abrirModalActualizar(element)\">\r\n        <mat-icon>edit</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"warn\" (click)=\"borrarCandidato(element)\">\r\n        <mat-icon>delete</mat-icon>\r\n      </button>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n</table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Partido } from 'src/app/models/Partido';\r\nimport { ModalPartidosComponent } from './modal-partidos/modal-partidos.component';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-partidos',\r\n  templateUrl: './partidos.component.html',\r\n  styleUrls: ['./partidos.component.css']\r\n})\r\nexport class PartidosComponent implements OnInit {\r\n  displayedColumns: string[] = [ 'nombre', 'acciones'];\r\n  partidos: Partido[]= [];\r\n\r\n  constructor(private abmServices: CrudService, public dialog: MatDialog){\r\n\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.loadData();\r\n  }\r\n\r\n  loadData(){\r\n    const partido = new Partido();\r\n\r\n    this.abmServices.getAllEntity(partido).subscribe(\r\n      (res:any[])=>{\r\n        this.partidos = res.map(x=> Object.assign(new Partido(), x));\r\n      }\r\n    );\r\n  }\r\n\r\n  abrirModalAgregar(){\r\n    const dialogRef = this.dialog.open(ModalPartidosComponent, {\r\n      data: {\r\n        partido: undefined\r\n      },\r\n      width: '400px', // Especifica el ancho del modal\r\n      panelClass: 'custom-modal-background', // Aplica la clase personalizada al modal\r\n      // Otras opciones del modal...\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      console.log('El modal se cerró');\r\n      // Realizar acciones después de cerrar el modal, como llamar al servicio de ABM\r\n      this.loadData();\r\n    });\r\n  }\r\n\r\n  abrirModalActualizar(p: Partido){\r\n    // Lógica para abrir el modal de actualización y pasar la elección como parámetro\r\n    const dialogRef = this.dialog.open(ModalPartidosComponent, {\r\n      data: {\r\n        partido: p\r\n      },\r\n      width: '400px', // Especifica el ancho del modal\r\n      panelClass: 'custom-modal-background', // Aplica la clase personalizada al modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      // Lógica para manejar el resultado del modal de actualización\r\n      this.loadData();\r\n      console.log('Resultado del modal de actualización:', result);\r\n    });\r\n  }\r\n\r\n  borrarCandidato(p: Partido){\r\n    Swal.fire({\r\n      title: '¿Estás seguro?',\r\n      text: 'Esta acción no se puede deshacer',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Sí, borrar',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        // Lógica para borrar la elección\r\n        // ...\r\n        this.abmServices.delete(p).subscribe(\r\n          res => {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Partido borrado',\r\n              text: 'Los datos han sido borrados exitosamente'\r\n            });\r\n            this.loadData();\r\n          },\r\n          err => {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error al borrar Partido ',\r\n              text: 'Ha ocurrido un error al borrar los datos'\r\n            });\r\n            console.log(err);\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n","<mat-dialog-content>\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"saveCargo()\">\r\n\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Nombre\" formControlName=\"nombre\">\r\n      <mat-error *ngIf=\"form.controls['nombre'].hasError('required')\">El nombre es requeridos</mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <div class=\"button-container\">\r\n      <button class=\"btn-guardar\" mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"form.invalid\">Guardar</button>\r\n      <button class=\"btn-cerrar\" mat-button (click)=\"closeModal($event)\">Cerrar</button>\r\n    </div>\r\n  </form>\r\n</mat-dialog-content>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Cargo } from 'src/app/models/Cargo';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-modal-cargos-alta',\r\n  templateUrl: './modal-cargos-alta.component.html',\r\n  styleUrls: ['./modal-cargos-alta.component.css']\r\n})\r\nexport class ModalCargosAltaComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  cargo: Cargo | undefined;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    public dialogRef: MatDialogRef<ModalCargosAltaComponent>,\r\n    private abmService: CrudService,\r\n    @Inject(MAT_DIALOG_DATA) public data: { cargo: Cargo | undefined }\r\n  ) {\r\n    this.form = this.formBuilder.group({\r\n      nombre: ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.cargo = this.data.cargo ? this.data.cargo : undefined;\r\n    if (this.cargo) {\r\n      this.form.patchValue({\r\n        ...this.cargo\r\n      })\r\n    }\r\n  }\r\n\r\n  saveCargo() {\r\n\r\n    if (this.form.valid) {\r\n      if (this.cargo && this.cargo.id > 0) {\r\n        //Si hay una instancia de cargo y su id es mayor a cero es un update\r\n        let c: Cargo =new Cargo();\r\n        c = Object.assign(new Cargo, this.form.value);\r\n        c.id = this.cargo.id;\r\n        this.abmService.update(c).subscribe(\r\n          (res:Cargo)=> {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Actualización exitosa',\r\n              text: 'Los datos del compañero han sido actualizados'\r\n            });\r\n            this.dialogRef.close();\r\n          }\r\n        );\r\n\r\n\r\n      } else {\r\n        //si no hay instancia de Cargo es un create\r\n        let cargo: Cargo =new Cargo();\r\n         cargo = Object.assign(new Cargo, this.form.value);\r\n\r\n        this.abmService.create(cargo).subscribe(\r\n          (res: Cargo)=>{\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Alta exitosa',\r\n              text: `Se genero un nuevo Compañero con ID = ${res.id}`\r\n            });\r\n            this.dialogRef.close();\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  closeModal(event: Event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    // Lógica para cerrar el modal\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<button mat-fab color=\"primary\" class=\"floating-button\" (click)=\"abrirModal()\">\r\n  <mat-icon>add</mat-icon>\r\n</button>\r\n\r\n<table mat-table [dataSource]=\"candidatos\" class=\"mat-elevation-z8\">\r\n  <!--- Note that these columns can be defined in any order.\r\n        The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"nombre\">\r\n    <th mat-header-cell *matHeaderCellDef>Nombre</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.nombre }}</td>\r\n  </ng-container>\r\n\r\n  <!-- Acciones Column -->\r\n  <ng-container matColumnDef=\"acciones\">\r\n    <th mat-header-cell *matHeaderCellDef>Acciones</th>\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <button mat-icon-button color=\"primary\" (click)=\"abrirModal(element)\">\r\n        <mat-icon>edit</mat-icon>\r\n      </button>\r\n      <button mat-icon-button color=\"warn\" (click)=\"borrarCargo(element)\">\r\n        <mat-icon>delete</mat-icon>\r\n      </button>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n</table>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { EleccionesComponent } from './elecciones/elecciones.component';\r\nimport { CompanerosComponent } from './companeros/companeros.component';\r\nimport { EscuelasComponent } from './escuelas/escuelas.component';\r\nimport { MesasComponent } from './mesas/mesas.component';\r\nimport { CandidatosComponent } from './candidatos/candidatos.component';\r\nimport { PartidosComponent } from './partidos/partidos.component';\r\nimport { CargosComponent } from './cargos/cargos.component';\r\n\r\nconst routes: Routes = [\r\n  {path: 'elecciones', component:EleccionesComponent},\r\n  {path: 'companeros', component:CompanerosComponent},\r\n  {path: 'escuelas', component: EscuelasComponent},\r\n  {path: 'mesas', component: MesasComponent},\r\n  {path: 'candidatos', component:CandidatosComponent},\r\n  {path: 'partidos', component: PartidosComponent},\r\n  {path: 'cargos', component: CargosComponent},\r\n  // { path: 'setup-elecciones', loadChildren: () => import('./../setup-eleccion/setup-eleccion.module').then(m => m.SetupEleccionModule) },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AbmRoutingModule { }\r\n","import { Component } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Cargo } from 'src/app/models/Cargo';\r\nimport Swal from 'sweetalert2';\r\nimport { ModalCargosAltaComponent } from './modal-cargos-alta/modal-cargos-alta.component';\r\n\r\n@Component({\r\n  selector: 'app-cargos',\r\n  templateUrl: './cargos.component.html',\r\n  styleUrls: ['./cargos.component.css']\r\n})\r\nexport class CargosComponent {\r\n  displayedColumns: string[] = ['nombre', 'acciones'];\r\n  candidatos: Cargo[]= [];\r\n\r\n  constructor(private abmServices: CrudService, public dialog: MatDialog){\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadData();\r\n  }\r\n\r\n  loadData(){\r\n    const cargo = new Cargo();\r\n\r\n    this.abmServices.getAllEntity(cargo).subscribe(\r\n      (res:any[])=>{\r\n        this.candidatos = res.map(x=> Object.assign(new Cargo(), x));\r\n      }\r\n    );\r\n  }\r\n  borrarCargo(c: Cargo){\r\n    Swal.fire({\r\n      title: '¿Estás seguro?',\r\n      text: 'Esta acción no se puede deshacer',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Sí, borrar',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        // Lógica para borrar la elección\r\n        // ...\r\n        this.abmServices.delete(c).subscribe(\r\n          res => {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Cargo borrado',\r\n              text: 'Los datos han sido borrados exitosamente'\r\n            });\r\n            this.loadData();\r\n          },\r\n          err => {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error al borrar Cargo ',\r\n              text: 'Ha ocurrido un error al borrar los datos'\r\n            });\r\n            console.log(err);\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  abrirModal(c?: Cargo){\r\n    // Lógica para abrir el modal de actualización y pasar la elección como parámetro\r\n    const dialogRef = this.dialog.open(ModalCargosAltaComponent, {\r\n      data: {\r\n        cargo: c\r\n      },\r\n      width: '400px', // Especifica el ancho del modal\r\n      panelClass: 'custom-modal-background', // Aplica la clase personalizada al modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      // Lógica para manejar el resultado del modal de actualización\r\n      this.loadData();\r\n      console.log('Resultado del modal de actualización:', result);\r\n    });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AbmRoutingModule } from './abm-routing.module';\r\nimport { EleccionesComponent } from './elecciones/elecciones.component';\r\nimport { MaterialModule } from 'src/app/Shared/modules/material.module';\r\nimport { ModalAltaComponent } from './elecciones/modal-alta/modal-alta.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CompanerosComponent } from './companeros/companeros.component';\r\nimport { ModalCompaneroComponent } from './companeros/modal-alta/modal-alta.component';\r\nimport { EscuelasComponent } from './escuelas/escuelas.component';\r\nimport { ModalEscuelasComponent } from './escuelas/modal-escuelas/modal-escuelas.component';\r\nimport { MesasComponent } from './mesas/mesas.component';\r\nimport { MesasModalComponent } from './mesas/mesas-modal/mesas-modal.component';\r\nimport { CandidatosComponent } from './candidatos/candidatos.component';\r\nimport { CandidatosModalComponent } from './candidatos/candidatos-modal/candidatos-modal.component';\r\nimport { PartidosComponent } from './partidos/partidos.component';\r\nimport { ModalPartidosComponent } from './partidos/modal-partidos/modal-partidos.component';\r\nimport { CargosComponent } from './cargos/cargos.component';\r\nimport { ModalCargosAltaComponent } from './cargos/modal-cargos-alta/modal-cargos-alta.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    EleccionesComponent,\r\n    ModalAltaComponent,\r\n    CompanerosComponent,\r\n    ModalCompaneroComponent,\r\n    EscuelasComponent,\r\n    ModalEscuelasComponent,\r\n    MesasComponent,\r\n    MesasModalComponent,\r\n    CandidatosComponent,\r\n    CandidatosModalComponent,\r\n    PartidosComponent,\r\n    ModalPartidosComponent,\r\n    CargosComponent,\r\n    ModalCargosAltaComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AbmRoutingModule,\r\n    MaterialModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n\r\n})\r\nexport class AbmModule {}\r\n"],"x_google_ignoreList":[]}