{"version":3,"file":"common.e52f956948efdbfa.js","mappings":"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","names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","TextToSpeechService","speak","text","window","speechSynthesis","cancel","this","splitTextIntoParts","forEach","part","utterance","SpeechSynthesisUtterance","lang","rate","console","split","filter","paragraph","trim","t","core","Yz7","factory","ɵfac","providedIn","FunctionCallingService","constructor","speechService","textToSpeechService","http","Urls","_this","functionsCallings","functionReturned","BehaviorSubject","functionReturned$","asObservable","mensajes","api_url","apiUrl","push","role","content","transcriptionSubject","subscribe","_ref","_asyncToGenerator","fn","self","args","arguments","apply","err","length","splice","requestBody","model","temperature","messages","functions","response","post","toPromise","data","responseData","log","choices","message","finish_reason","next","m","includes","unescapedString","replace","rta","JSON","stringify","function_call","shift","_x","addPromptText","promptText","crearPrompt","addFunction","func","addFunctions","funcs","concat","removeFunction","indexOf","removeFunctions","getFunctions","i0","i1","i2","i3","API_URLS","ResultadoMesa","DetalleResultado","cantidadVotos"],"sourceRoot":"webpack:///","sources":["./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","./src/app/Shared/services/text-to-speech.service.ts","./src/app/Shared/services/functionCalling.service.ts","./src/app/models/ResultadoMesa.ts"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TextToSpeechService {\r\n  // speak(text: string): void {\r\n  //   if ('speechSynthesis' in window) {\r\n  //     const utterance = new SpeechSynthesisUtterance(text);\r\n  //     utterance.lang = 'es-ES'; // Establece el idioma en español (España)\r\n  //     utterance.rate = 1.2; // Ajusta la velocidad del habla a 1.2\r\n  //     window.speechSynthesis.speak(utterance);\r\n  //   } else {\r\n  //     console.error('La síntesis de voz no es compatible con este navegador.');\r\n  //   }\r\n  // }\r\n\r\n  speak(text: string): void {\r\n    if ('speechSynthesis' in window) {\r\n      window.speechSynthesis.cancel();\r\n      const textParts = this.splitTextIntoParts(text);\r\n\r\n      textParts.forEach((part) => {\r\n        const utterance = new SpeechSynthesisUtterance(part);\r\n        utterance.lang = 'es-ES'; // Establece el idioma en español (España)\r\n        utterance.rate = 1.2; // Ajusta la velocidad del habla a 1.2\r\n        window.speechSynthesis.speak(utterance);\r\n      });\r\n    } else {\r\n      console.error('La síntesis de voz no es compatible con este navegador.');\r\n    }\r\n  }\r\n\r\n  private splitTextIntoParts(text: string): string[] {\r\n    const paragraphs = text.split('. ').filter((paragraph) => paragraph.trim() !== '');\r\n\r\n\r\n    return paragraphs;\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { FunctionCall } from 'src/app/models/FunctionInterface';\r\nimport { Configuration, CreateChatCompletionResponse, OpenAIApi } from 'openai';\r\nimport { SpeechRecognitionService } from './speech-recognition.service';\r\nimport { TextToSpeechService } from './text-to-speech.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { API_URLS, AppSetings } from 'src/app/app-setting/app-config.token';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FunctionCallingService {\r\n  private functionsCallings: any[] = [];\r\n  private functionReturned = new BehaviorSubject<string>(\"\");\r\n  public functionReturned$ = this.functionReturned.asObservable();\r\n\r\n  openai!: OpenAIApi;\r\n  private api_url: string;\r\n  mensajes: any = [];\r\n\r\n  constructor(private speechService: SpeechRecognitionService, private textToSpeechService: TextToSpeechService,\r\n    private http: HttpClient, @Inject(API_URLS) private Urls: AppSetings) {\r\n\r\n    this.api_url = Urls.apiUrl;\r\n\r\n    this.mensajes.push({\r\n      role: 'assistant', content:  \" Don't make assumptions about what values to plug into functions. \" +\r\n        \" Ask for clarification if a user request is ambiguous. Only the values in the enum are valid. If it is not in the enum, it informs the user of the situation. \" +\r\n        \"Your Goal is allways response in valid json format. \"\r\n    })\r\n\r\n    this.speechService.transcriptionSubject.subscribe(\r\n      async (text: string) => {\r\n        if (text.trim().length > 0) {\r\n          this.mensajes.push({ role: 'user', content: text });\r\n\r\n          if (this.mensajes.length > 10) {\r\n            this.mensajes.splice(1, 1);\r\n          }\r\n\r\n          const requestBody = {\r\n            model: 'gpt-3.5-turbo-0613',\r\n            temperature: 0.2,\r\n            messages: this.mensajes,\r\n            functions: this.functionsCallings\r\n          };\r\n\r\n          try {\r\n            const response = await this.http.post<any>(`${this.api_url}gpt`, requestBody).toPromise();\r\n\r\n            if (response && response.data) {\r\n              const responseData = response.data;\r\n\r\n            console.log(responseData.choices[0].message);\r\n            console.log(\"Motivo de finalizad0 = \" + responseData.choices[0].finish_reason);\r\n\r\n            if (responseData.choices[0].finish_reason !== 'function_call') {\r\n              this.mensajes.push({ role: 'assistant', content: responseData.choices[0].message.content });\r\n\r\n              if (responseData.choices[0].message.content) {\r\n                this.functionReturned.next(responseData.choices[0].message.content);\r\n                const m = responseData.choices[0].message.content;\r\n\r\n                if (!m.includes(\"name\") && !m.includes(\"arguments\")) {\r\n                  const trimmedString = m.replace(/^\"|\"$/g, '');\r\n                  const unescapedString = trimmedString.replace(/\\\\\"/g, '\"');\r\n                  this.textToSpeechService.speak(unescapedString);\r\n                }\r\n              }\r\n            } else {\r\n              const rta = JSON.stringify(responseData.choices[0].message.function_call);\r\n              this.functionReturned.next(rta);\r\n              this.mensajes.push({ role: 'assistant', content: rta });\r\n            }\r\n\r\n            if (this.mensajes.length > 10) {\r\n              this.mensajes.shift();\r\n            }\r\n\r\n            }\r\n\r\n          } catch (error) {\r\n            console.error(error);\r\n            // Manejo de errores\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n\r\n\r\n  }\r\n\r\n  addPromptText(promptText: string){\r\n    this.mensajes= [];\r\n    this.mensajes.push({\r\n      role: 'assistant', content:  promptText\r\n    })\r\n\r\n  }\r\n  crearPrompt() {\r\n    return \"\";\r\n  }\r\n  addFunction(func: FunctionCall) {\r\n    this.functionsCallings.push(func);\r\n  }\r\n  addFunctions(funcs: FunctionCall[]) {\r\n    this.functionsCallings = this.functionsCallings.concat(funcs);\r\n  }\r\n\r\n  removeFunction(func: FunctionCall) {\r\n    this.functionsCallings.splice(this.functionsCallings.indexOf(func), 1);\r\n  }\r\n\r\n  removeFunctions(funcs: FunctionCall[]) {\r\n    for (const func of funcs) {\r\n      this.removeFunction(func);\r\n    }\r\n  }\r\n\r\n  getFunctions(): FunctionCall[] {\r\n    return this.functionsCallings;\r\n  }\r\n\r\n\r\n}\r\n","import { Cargo } from \"./Cargo\";\r\nimport { ListaElectoral } from \"./ListaElectoral\";\r\nimport { MesasElectoral } from \"./MesaElectoral\";\r\n\r\nexport class ResultadoMesa {\r\n\r\n  mesa_id!: number;\r\n  cargo_id!: number;\r\n  votosAfirmativos!: number;\r\n  votosBlancos!: number;\r\n  votosNulos!: number;\r\n  votosRecurridos!: number;\r\n  votosImpuganados!: number;\r\n  total!: number;\r\n  MesaElectoral!: MesasElectoral | undefined;\r\n  Cargo!: Cargo;\r\n  DetalleResultado: DetalleResultado[]=[];\r\n\r\n}\r\n\r\nexport class DetalleResultado {\r\n\r\n  mesa_id!: number;\r\n  cargo_id!: number;\r\n  lista_id!: number;\r\n  cantidadVotos: number = 0;\r\n  ListaElectoral! : ListaElectoral;\r\n\r\n\r\n}\r\n"],"x_google_ignoreList":[0]}