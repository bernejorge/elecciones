{"version":3,"file":"941.2171928f006ce129.js","mappings":"+SAOMA,MAAA,eAAoEA,MAAA,kCAA4BA,+BAKhGA,MAAA,eAA2EA,MAAA,0CAAoCA,kCAM7GA,MAAA,mBAAkEA,MAAA,GAAoBA,kCAAzCA,MAAA,QAAAC,EAAAC,IAAqBF,MAAA,GAAAA,MAAAC,EAAAE,OAAA,wBAEpEH,MAAA,eAAoEA,MAAA,6BAAuBA,kCAMzFA,MAAA,mBAAsEA,MAAA,GAAqBA,kCAA3CA,MAAA,QAAAI,EAAAF,IAAsBF,MAAA,GAAAA,MAAAI,EAAAD,OAAA,wBAExEH,MAAA,eAAqEA,MAAA,iDAA2CA,SCb/G,IAAMK,EAAmB,MAA1B,MAAOA,EAMXC,YACSC,EACCC,EACAC,EACwBC,GAHzBC,KAAAJ,YACCI,KAAAH,cACAG,KAAAF,aACwBE,KAAAD,OARlCC,KAAAC,SAAuB,GACvBD,KAAAE,WAA0B,GAE1BF,KAAAG,UAAoB,EAOlBH,KAAKI,KAAOL,EAAKK,IACnB,CAEAC,WACE,MAAMC,EAAI,IAAIC,IACRC,EAAW,IAAIC,IACrBT,KAAKF,WAAWY,aAAsBJ,GACnCK,UAAWC,IACVZ,KAAKC,SAAWW,EAAIC,IAAIC,GAAIC,OAAOC,OAAO,IAAIT,IAAWO,GAAE,GAG/Dd,KAAKF,WAAWY,aAAuBF,GACpCG,UAAWC,IACVZ,KAAKE,WAAaU,EAAIC,IAAIC,GAAKC,OAAOC,OAAO,IAAIP,IAAYK,GAAE,EAErE,CAEAG,WACEjB,KAAKK,WACLL,KAAKkB,KAAOlB,KAAKH,YAAYsB,MAAM,CACjCC,WAAY,CAAC,GAAIC,KAAWC,UAC5BC,kBAAmB,CAAC,GAAIF,KAAWC,UACnCE,WAAY,CAAC,GAAIH,KAAWC,UAC5BG,YAAa,CAAC,GAAIJ,KAAWC,YAG3BtB,KAAKI,OAGPJ,KAAKG,UAAW,EAChBH,KAAKkB,KAAKQ,WAAW,IAAI1B,KAAKI,OAGlC,CAEAuB,WACE,GAAI3B,KAAKkB,KAAKU,MACZ,GAAI5B,KAAKI,KAAM,CAEb,IAAIyB,EAAId,OAAOC,OAAO,IAAIc,IAAkB9B,KAAKkB,KAAKa,OACtDF,EAAEtC,GAAKS,KAAKI,KAAKb,GACjBS,KAAKF,WAAWkC,OAAOH,GAAGlB,UACvBC,IACCqB,SAAU,CACRC,KAAM,UACNC,MAAO,2BACPC,KAAM,+CAERpC,KAAKJ,UAAUyC,OAAK,EACrB,KAGA,CAEH,IAAIjC,EAAsB,IAAI0B,IAC9B1B,EAAOW,OAAOC,OAAO,IAAIc,IAAgB9B,KAAKkB,KAAKa,OAEnD/B,KAAKF,WAAWwC,OAAOlC,GAAMO,UAC1BC,IACCqB,SAAU,CACRC,KAAM,UACNC,MAAO,eACPC,KAAM,qCAAqCxB,EAAIrB,OAEjDS,KAAKJ,UAAUyC,OAAK,EACrB,CAIT,CAEAE,WAAWC,GACTA,EAAMC,kBACND,EAAME,iBAEN1C,KAAKJ,UAAUyC,OACjB,EAxFW3C,SAAmB,mBAAAiD,iBAAnBjD,GAAmBL,MAAAuD,MAAAvD,MAAAwD,MAAAxD,MAAAyD,KAAAzD,MAUpB0D,MAAe,EAVdrD,EAAmB,UAAAsD,EAAAC,IAAA,MAAnBvD,EAAmBwD,UAAA,sBAAAC,MAAA,GAAAC,KAAA,GAAAC,OAAA,qjBAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDfhClE,MAAA,yBAAAA,CAA2C,QAErCA,MAAA,GAAmDA,QAEvDA,MAAA,YAAyBA,MAAA,6BAAYmE,EAAA7B,UAAU,GAC7CtC,MAAA,sBACEA,MAAA,aACAA,MAAA,EAAAoE,EAAA,mBACFpE,QAEAA,MAAA,sBACEA,MAAA,aACAA,MAAA,EAAAqE,EAAA,mBACFrE,QAEAA,MAAA,sBAAAA,CAAsD,gBACzCA,MAAA,cAAOA,QAClBA,MAAA,mBAAyCA,MAAA,yBAAAsE,GAAA,OAAAH,EAAAtC,KAAAa,MAAAP,WAAAmC,CAAA,GACvCtE,MAAA,GAAAuE,EAAA,oBACFvE,QACAA,MAAA,GAAAwE,EAAA,mBACFxE,QAEAA,MAAA,sBAAAA,CAAsD,gBACzCA,MAAA,eAAQA,QACnBA,MAAA,mBAA0CA,MAAA,yBAAAsE,GAAA,OAAAH,EAAAtC,KAAAa,MAAAN,YAAAkC,CAAA,GACxCtE,MAAA,GAAAyE,EAAA,oBACFzE,QACAA,MAAA,GAAA0E,EAAA,mBACF1E,QAEAA,MAAA,WAAAA,CAA8B,gBAC0DA,MAAA,cAAOA,QAC7FA,MAAA,gBAAsCA,MAAA,iBAAAsE,GAAA,OAASH,EAAAjB,WAAAoB,EAAkB,GAAEtE,MAAA,aAAMA,qBA/BzEA,MAAA,GAAAA,MAAAmE,EAAArD,SAAA,kCAEEd,MAAA,GAAAA,MAAA,YAAAmE,EAAAtC,MAGU7B,MAAA,GAAAA,MAAA,OAAAmE,EAAAtC,KAAA8C,SAAA5C,WAAA6C,SAAA,aAKA5E,MAAA,GAAAA,MAAA,OAAAmE,EAAAtC,KAAA8C,SAAAzC,kBAAA0C,SAAA,aAK6B5E,MAAA,GAAAA,MAAA,UAAAmE,EAAAtC,KAAAa,MAAAP,YACPnC,MAAA,GAAAA,MAAA,UAAAmE,EAAAvD,UAEtBZ,MAAA,GAAAA,MAAA,OAAAmE,EAAAtC,KAAA8C,SAAAxC,WAAAyC,SAAA,aAK8B5E,MAAA,GAAAA,MAAA,UAAAmE,EAAAtC,KAAAa,MAAAN,aACPpC,MAAA,GAAAA,MAAA,UAAAmE,EAAAtD,YAEvBb,MAAA,GAAAA,MAAA,OAAAmE,EAAAtC,KAAA8C,SAAAvC,YAAAwC,SAAA,aAIgD5E,MAAA,GAAAA,MAAA,WAAAmE,EAAAtC,KAAAgD,o0CCjBrDxE,CAAmB,6DCD5BL,MAAA,WAAuCA,MAAA,sBAAeA,kCACtDA,MAAA,WAAwCA,MAAA,GAAuBA,kCAAvBA,MAAA,GAAAA,MAAA,IAAA8E,EAAA/C,WAAA,4BAKxC/B,MAAA,WAAuCA,MAAA,eAAQA,kCAC/CA,MAAA,WAAwCA,MAAA,GAA2BA,kCAA3BA,MAAA,GAAAA,MAAA,IAAA+E,EAAA7D,QAAAf,OAAA,4BAKtCH,MAAA,WAAuCA,MAAA,gBAASA,kCAChDA,MAAA,WAAwCA,MAAA,GAA4BA,kCAA5BA,MAAA,GAAAA,MAAA,IAAAgF,EAAA5D,SAAAjB,OAAA,4BAKxCH,MAAA,WAAuCA,MAAA,sBAAeA,kCACtDA,MAAA,WAAwCA,MAAA,GAA8BA,kCAA9BA,MAAA,GAAAA,MAAA,IAAAiF,EAAA/C,kBAAA,4BAK5ClC,MAAA,WAAuCA,MAAA,gBAASA,iDAChDA,MAAA,UAAAA,CAAuC,eACGA,MAAA,yBAAAkF,EAAAlF,MAAAmF,GAAAC,UAAAC,EAAArF,QAAA,OAASA,MAAAqF,EAAAC,qBAAAJ,GAA6B,GAC5ElF,MAAA,cAAUA,MAAA,UAAIA,UAEhBA,MAAA,eAAqCA,MAAA,yBAAAkF,EAAAlF,MAAAmF,GAAAC,UAAAG,EAAAvF,QAAA,OAASA,MAAAuF,EAAAC,eAAAN,GAAuB,GACnElF,MAAA,cAAUA,MAAA,YAAMA,WAAW,uBAM/BA,MAAA,gCACAA,MAAA,WCrCK,IAAMyF,EAAc,MAArB,MAAOA,EAKXnF,YAAoBoF,EAAiCC,EAA2BC,GAA5DjF,KAAA+E,cAAiC/E,KAAAgF,SAA2BhF,KAAAiF,eAJhFjF,KAAAkF,MAAyB,GACzBlF,KAAAmF,iBAA6B,CAAC,aAAc,UAAW,WAAY,oBAAqB,YACxFnF,KAAAM,EAAoB,KAGlBN,KAAKM,EAAKN,KAAKiF,aAAaG,qBAAqBC,UACnD,CACApE,WACEjB,KAAKK,UACP,CAEAA,WACE,MAAMwB,EAAI,IAAIC,IAEd9B,KAAK+E,YAAYrE,aAA6BmB,GAAGlB,UAC9CC,IACC,MAAMsE,EAAQtE,EAAIC,IAAIC,GAAIC,OAAOC,OAAO,IAAIc,IAAkBhB,IAC9Dd,KAAKkF,MAAQA,EAAMI,OAAQlF,GAAyBA,EAAKK,SAASlB,KAAOS,KAAKM,GAAGf,GAAE,EAGzF,CAEAgG,oBACoBvF,KAAKgF,OAAOQ,KAAK9F,EAAqB,CACtDK,KAAM,CACJK,UAAMqF,GAERC,MAAO,QACPC,WAAY,4BAIJC,cAAcjF,UAAWkF,IACjCC,QAAQC,IAAI,wBAEZ/F,KAAKK,UAAQ,EAEjB,CAEAsE,qBAAqBvE,GAGDJ,KAAKgF,OAAOQ,KAAK9F,EAAqB,CACtDK,KAAM,CACJK,KAAMA,GAERsF,MAAO,QACPC,WAAY,4BAGJC,cAAcjF,UAAUkF,IAEhC7F,KAAKK,WACLyF,QAAQC,IAAI,2CAAyCF,EAAM,EAE/D,CAEAhB,eAAezE,GACb6B,SAAU,CACRE,MAAO,uBACPC,KAAM,sCACNF,KAAM,UACN8D,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,kBAAmB,gBACnBC,iBAAkB,aACjBC,KAAMR,IACHA,EAAOS,aAGTtG,KAAK+E,YAAYwB,OAAOnG,GAAMO,UAC5BC,IACEqB,SAAU,CACRC,KAAM,UACNC,MAAO,kBACPC,KAAM,0CAERpC,KAAKK,UAAQ,EAEfmG,IACEvE,SAAU,CACRC,KAAM,QACNC,MAAO,0BACPC,KAAM,2CAER0D,QAAQC,IAAIS,EAAG,EAChB,EAIT,EA5FW1B,SAAc,mBAAAnC,iBAAdmC,GAAczF,MAAAuD,KAAAvD,MAAAwD,MAAAxD,MAAAyD,KAAA,EAAdgC,EAAc,UAAA9B,EAAAC,IAAA,MAAd6B,EAAc5B,UAAA,gBAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,gmBAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDb3BlE,MAAA,cAAwDA,MAAA,0BAASmE,EAAA+B,mBAAmB,GAClFlG,MAAA,cAAUA,MAAA,SAAGA,UAGfA,MAAA,aAQEA,MAAA,KACEA,MAAA,EAAAoH,EAAA,YACApH,MAAA,EAAAqH,EAAA,YACFrH,QAGAA,MAAA,KACEA,MAAA,EAAAsH,EAAA,YACAtH,MAAA,EAAAuH,EAAA,YACFvH,QAGEA,MAAA,MACEA,MAAA,GAAAwH,EAAA,YACAxH,MAAA,GAAAyH,EAAA,YACFzH,QAGAA,MAAA,MACEA,MAAA,GAAA0H,EAAA,YACA1H,MAAA,GAAA2H,EAAA,YACF3H,QAGHA,MAAA,MACCA,MAAA,GAAA4H,EAAA,YACA5H,MAAA,GAAA6H,EAAA,YAQF7H,QAGEA,MAAA,GAAA8H,EAAA,YACA9H,MAAA,GAAA+H,EAAA,aACF/H,eA/CiBA,MAAA,GAAAA,MAAA,aAAAmE,EAAA0B,OA6CK7F,MAAA,IAAAA,MAAA,kBAAAmE,EAAA2B,kBACa9F,MAAA,GAAAA,MAAA,mBAAAmE,EAAA2B,weCrCtBL,CAAc,oDCZrB,MAAOuC,UAAkBC,IACpBC,gBACP,MAAO,GAAGvH,KAAKR,UAAUQ,KAAKwH,UAChC,CAKA7H,cACE8H,OACF,CAEaC,eACX,MAAO,YACT,kDCdI,MAAOC,UAAcL,IAIzB3H,cACE8H,OACF,CAEIC,eACH,MAAO,QACR,CAEAH,gBACE,OAAOvH,KAAKR,MACd,kDCdI,MAAOoI,UAAkBN,IACpBC,gBACP,MAAO,GAAGvH,KAAKR,UAAUQ,KAAKwH,YAAYxH,KAAK6H,KACjD,CAQAlI,cACE8H,OACF,CAEaC,eACX,MAAO,YACT,kDCjBI,MAAOjH,UAAiB6G,IACrBQ,gBACH,MAAO,YACX,CAKAnI,cACE8H,OAEF,CACaC,eACX,MAAO,YACT,CACSH,gBACP,MAAO,GAAGvH,KAAKR,SACjB,kDChBI,MAAOe,UAAgB+G,IAM3B3H,cACE8H,QAFFzH,KAAA+H,eAAmC,EAInC,CACaL,eACX,MAAO,UACT,CAESH,gBACP,MAAO,GAAGvH,KAAKR,QACjB,iDCjBI,MAAOwI,UAAgBV,IAClBC,gBACP,MAAO,GAAGvH,KAAKR,SACjB,CAIAG,cACE8H,OACF,CAEaC,eACX,MAAO,UACT","names":["i0","escuela_r6","id","nombre","eleccion_r7","MesasModalComponent","constructor","dialogRef","formBuilder","abmService","data","this","escuelas","elecciones","isUpdate","mesa","loadData","e","Escuela","eleccion","Eleccion","getAllEntity","subscribe","res","map","x","Object","assign","ngOnInit","form","group","numeroMesa","Validators","required","cantidad_votantes","escuela_id","eleccion_id","patchValue","saveMesa","valid","m","MesasElectoral","value","update","Swal","icon","title","text","close","create","closeModal","event","stopPropagation","preventDefault","t","i1","i2","i3","MAT_DIALOG_DATA","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","MesasModalComponent_mat_error_6_Template","MesasModalComponent_mat_error_9_Template","$event","MesasModalComponent_mat_option_14_Template","MesasModalComponent_mat_error_15_Template","MesasModalComponent_mat_option_20_Template","MesasModalComponent_mat_error_21_Template","controls","hasError","invalid","element_r12","element_r13","element_r14","element_r15","element_r16","_r18","$implicit","ctx_r17","abrirModalActualizar","ctx_r19","borrarEleccion","MesasComponent","ambServices","dialog","setupService","mesas","displayedColumns","eleccionSeleccionada","getValue","filter","abrirModalAgregar","open","undefined","width","panelClass","afterClosed","result","console","log","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","isConfirmed","delete","err","MesasComponent_th_5_Template","MesasComponent_td_6_Template","MesasComponent_th_8_Template","MesasComponent_td_9_Template","MesasComponent_th_11_Template","MesasComponent_td_12_Template","MesasComponent_th_14_Template","MesasComponent_td_15_Template","MesasComponent_th_17_Template","MesasComponent_td_18_Template","MesasComponent_tr_19_Template","MesasComponent_tr_20_Template","Candidato","BaseEntity","getFilterText","apellido","super","endPoint","Cargo","Companero","dni","static","MesaElectorals","Partido"],"sourceRoot":"webpack:///","sources":["./src/app/dash-board/abm/mesas/mesas-modal/mesas-modal.component.html","./src/app/dash-board/abm/mesas/mesas-modal/mesas-modal.component.ts","./src/app/dash-board/abm/mesas/mesas.component.html","./src/app/dash-board/abm/mesas/mesas.component.ts","./src/app/models/Candidato.ts","./src/app/models/Cargo.ts","./src/app/models/Companero.ts","./src/app/models/Elecciones.ts","./src/app/models/Escuela.ts","./src/app/models/Partido.ts"],"sourcesContent":["<mat-dialog-content class=\"form-container\">\r\n\r\n  <h2>{{ isUpdate ? 'Actualizar Mesa' : 'Agregar Mesa' }}</h2>\r\n\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"saveMesa()\">\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Nro de Mesa\" formControlName=\"numeroMesa\">\r\n      <mat-error *ngIf=\"form.controls['numeroMesa'].hasError('required')\">El nrp de mesa es requeridos</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <input matInput placeholder=\"Cantidad Votantes\" formControlName=\"cantidad_votantes\">\r\n      <mat-error *ngIf=\"form.controls['cantidad_votantes'].hasError('required')\">La Cantidad de votantes es requerida</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <mat-label>Escuela</mat-label>\r\n      <mat-select formControlName=\"escuela_id\" [(ngModel)]=\"form.value.escuela_id\">\r\n        <mat-option *ngFor=\"let escuela of escuelas\" [value]=\"escuela.id\">{{ escuela.nombre }}</mat-option>\r\n      </mat-select>\r\n      <mat-error *ngIf=\"form.controls['escuela_id'].hasError('required')\">La escuela es requerida</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"fill\" class=\"input-field\">\r\n      <mat-label>Eleccion</mat-label>\r\n      <mat-select formControlName=\"eleccion_id\" [(ngModel)]=\"form.value.eleccion_id\">\r\n        <mat-option *ngFor=\"let eleccion of elecciones\" [value]=\"eleccion.id\">{{ eleccion.nombre }}</mat-option>\r\n      </mat-select>\r\n      <mat-error *ngIf=\"form.controls['eleccion_id'].hasError('required')\">La eleccion a la que pertenece es requerida</mat-error>\r\n    </mat-form-field>\r\n\r\n    <div class=\"button-container\">\r\n      <button mat-raised-button class=\"btn-guardar\" type=\"submit\" [disabled]=\"form.invalid\">Guardar</button>\r\n      <button mat-button class=\"btn-cerrar\" (click)=\"closeModal($event)\">Cerrar</button>\r\n    </div>\r\n  </form>\r\n</mat-dialog-content>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { Escuela } from 'src/app/models/Escuela';\r\nimport { ModalEscuelasComponent } from '../../escuelas/modal-escuelas/modal-escuelas.component';\r\nimport { MesasElectoral } from 'src/app/models/MesaElectoral';\r\nimport { Eleccion } from 'src/app/models/Elecciones';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-mesas-modal',\r\n  templateUrl: './mesas-modal.component.html',\r\n  styleUrls: ['./mesas-modal.component.css']\r\n})\r\nexport class MesasModalComponent implements OnInit {\r\n  mesa: MesasElectoral | undefined;\r\n  escuelas : Escuela[] = [];\r\n  elecciones : Eleccion[] = [];\r\n  form!: FormGroup;\r\n  isUpdate: boolean = false;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ModalEscuelasComponent>,\r\n    private formBuilder: FormBuilder,\r\n    private abmService: CrudService,\r\n    @Inject(MAT_DIALOG_DATA) public data: { mesa: MesasElectoral | undefined }\r\n  ) {\r\n    this.mesa = data.mesa;\r\n  }\r\n\r\n  loadData(){\r\n    const e = new Escuela();\r\n    const eleccion = new Eleccion();\r\n    this.abmService.getAllEntity<Escuela>(e)\r\n      .subscribe((res: any[])=>{\r\n        this.escuelas = res.map(x=> Object.assign(new Escuela(), x));\r\n      });\r\n\r\n    this.abmService.getAllEntity<Eleccion>(eleccion)\r\n      .subscribe((res: any[])=>{\r\n        this.elecciones = res.map(x => Object.assign(new Eleccion(), x));\r\n      });\r\n  }\r\n\r\n  ngOnInit(){\r\n    this.loadData();\r\n    this.form = this.formBuilder.group({\r\n      numeroMesa: ['', Validators.required],\r\n      cantidad_votantes: ['', Validators.required],\r\n      escuela_id: ['', Validators.required], // Cambio de nombre a escuela_id\r\n      eleccion_id: ['', Validators.required],\r\n    });\r\n\r\n    if (this.mesa){\r\n      //si estoy actualizando tengo un isntancia de mesa\r\n      //le asigno los valores al formulario\r\n      this.isUpdate = true;\r\n      this.form.patchValue({...this.mesa});\r\n    }\r\n\r\n  }\r\n\r\n  saveMesa(){\r\n    if (this.form.valid) {\r\n      if (this.mesa) {\r\n        //si estoy actualizando\r\n        let m = Object.assign(new MesasElectoral(), this.form.value);\r\n        m.id = this.mesa.id;\r\n        this.abmService.update(m).subscribe(\r\n          (res:MesasElectoral)=> {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Actualización exitosa',\r\n              text: 'Los datos de la mesa han sido actualizados'\r\n            });\r\n            this.dialogRef.close();\r\n          }\r\n        );\r\n\r\n      }else{\r\n        //si estoy creando\r\n        let mesa: MesasElectoral =new MesasElectoral();\r\n        mesa = Object.assign(new MesasElectoral, this.form.value);\r\n\r\n        this.abmService.create(mesa).subscribe(\r\n          (res: MesasElectoral)=>{\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Alta exitosa',\r\n              text: `Se genero una nueva Mesa con ID = ${res.id}`\r\n            });\r\n            this.dialogRef.close();\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  closeModal(event: Event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    // Lógica para cerrar el modal\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","<!-- <button mat-button (click)=\"abrirModalAgregar()\">Agregar</button> -->\r\n<button mat-fab color=\"primary\" class=\"floating-button\" (click)=\"abrirModalAgregar()\">\r\n  <mat-icon>add</mat-icon>\r\n</button>\r\n\r\n<table mat-table [dataSource]=\"mesas\" class=\"mat-elevation-z8\">\r\n\r\n  <!--- Note that these columns can be defined in any order.\r\n        The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"numeroMesa\">\r\n    <th mat-header-cell *matHeaderCellDef> Numero de Mesa </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.numeroMesa}} </td>\r\n  </ng-container>\r\n\r\n  <!-- escuela Column -->\r\n  <ng-container matColumnDef=\"escuela\">\r\n    <th mat-header-cell *matHeaderCellDef> Escuela </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.Escuela.nombre}} </td>\r\n  </ng-container>\r\n\r\n    <!-- eleccion Column -->\r\n    <ng-container matColumnDef=\"eleccion\">\r\n      <th mat-header-cell *matHeaderCellDef> Eleccion </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.Eleccion.nombre}} </td>\r\n    </ng-container>\r\n\r\n    <!-- cant votantes Column -->\r\n    <ng-container matColumnDef=\"cantidad_votantes\">\r\n      <th mat-header-cell *matHeaderCellDef> Cant. Votantes </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.cantidad_votantes}} </td>\r\n    </ng-container>\r\n\r\n <!-- Acciones Column -->\r\n <ng-container matColumnDef=\"acciones\">\r\n  <th mat-header-cell *matHeaderCellDef> Acciones </th>\r\n  <td mat-cell *matCellDef=\"let element\">\r\n    <button mat-icon-button color=\"primary\" (click)=\"abrirModalActualizar(element)\">\r\n      <mat-icon>edit</mat-icon>\r\n    </button>\r\n    <button mat-icon-button color=\"warn\" (click)=\"borrarEleccion(element)\">\r\n      <mat-icon>delete</mat-icon>\r\n    </button>\r\n  </td>\r\n</ng-container>\r\n\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CrudService } from 'src/app/Shared/services/crud.service';\r\nimport { MesasElectoral } from 'src/app/models/MesaElectoral';\r\nimport { MesasModalComponent } from './mesas-modal/mesas-modal.component';\r\nimport Swal from 'sweetalert2';\r\nimport { SetupService } from 'src/app/Shared/services/setup.service';\r\nimport { Eleccion } from 'src/app/models/Elecciones';\r\n\r\n@Component({\r\n  selector: 'app-mesas',\r\n  templateUrl: './mesas.component.html',\r\n  styleUrls: ['./mesas.component.css']\r\n})\r\nexport class MesasComponent implements OnInit {\r\n  mesas: MesasElectoral[]= [];\r\n  displayedColumns: string[] = ['numeroMesa', 'escuela', 'eleccion', 'cantidad_votantes', 'acciones'];\r\n  e: Eleccion | null= null;\r\n\r\n  constructor(private ambServices: CrudService, public dialog: MatDialog, private setupService : SetupService){\r\n    this.e =  this.setupService.eleccionSeleccionada.getValue();\r\n  }\r\n  ngOnInit(): void {\r\n    this.loadData();\r\n  }\r\n\r\n  loadData(){\r\n    const m = new MesasElectoral();\r\n\r\n    this.ambServices.getAllEntity<MesasElectoral>(m).subscribe(\r\n      (res:any[]) => {\r\n        const mesas = res.map(x=> Object.assign(new MesasElectoral(), x));\r\n        this.mesas = mesas.filter((mesa: MesasElectoral) => mesa.Eleccion.id === this.e?.id )\r\n      }\r\n    )\r\n  }\r\n\r\n  abrirModalAgregar(): void {\r\n    const dialogRef = this.dialog.open(MesasModalComponent, {\r\n      data: {\r\n        mesa: undefined\r\n      },\r\n      width: '500px', // Especifica el ancho del modal\r\n      panelClass: 'custom-modal-background', // Aplica la clase personalizada al modal\r\n      // Otras opciones del modal...\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      console.log('El modal se cerró');\r\n      // Realizar acciones después de cerrar el modal, como llamar al servicio de ABM\r\n      this.loadData();\r\n    });\r\n  }\r\n\r\n  abrirModalActualizar(mesa: MesasElectoral): void {\r\n\r\n    // Lógica para abrir el modal de actualización y pasar la elección como parámetro\r\n    const dialogRef = this.dialog.open(MesasModalComponent, {\r\n      data: {\r\n        mesa: mesa,\r\n      },\r\n      width: '500px', // Especifica el ancho del modal\r\n      panelClass: 'custom-modal-background', // Aplica la clase personalizada al modal\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      // Lógica para manejar el resultado del modal de actualización\r\n      this.loadData();\r\n      console.log('Resultado del modal de actualización:', result);\r\n    });\r\n  }\r\n\r\n  borrarEleccion(mesa : MesasElectoral): void {\r\n    Swal.fire({\r\n      title: '¿Estás seguro?',\r\n      text: 'Esta acción no se puede deshacer',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Sí, borrar',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        // Lógica para borrar la elección\r\n        // ...\r\n        this.ambServices.delete(mesa).subscribe(\r\n          res => {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Escuela borrada',\r\n              text: 'La mesa  ha sido borrada exitosamente'\r\n            });\r\n            this.loadData();\r\n          },\r\n          err => {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error al borrar escuela',\r\n              text: 'Ha ocurrido un error al borrar la mesa'\r\n            });\r\n            console.log(err);\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n}\r\n","import { BaseEntity } from \"./BaseEntity\";\r\n\r\nexport class Candidato extends BaseEntity{\r\n  override getFilterText(): string {\r\n    return `${this.nombre} ${this.apellido}` ;\r\n  }\r\n\r\n  nombre!: string;\r\n  apellido!: string;\r\n\r\n  constructor(){\r\n    super();\r\n  }\r\n\r\n  override get endPoint(): string {\r\n    return \"candidatos\";\r\n  }\r\n\r\n}\r\n","import { BaseEntity } from \"./BaseEntity\";\r\n\r\nexport class Cargo extends BaseEntity{\r\n\r\n  nombre!: string;\r\n\r\n  constructor(){\r\n    super();\r\n  }\r\n\r\n  get endPoint(): string {\r\n   return \"cargos\";\r\n  }\r\n\r\n  getFilterText(): string {\r\n    return this.nombre;\r\n  }\r\n\r\n}\r\n","import { BaseEntity } from \"./BaseEntity\";\r\n\r\nexport class Companero extends BaseEntity{\r\n  override getFilterText(): string {\r\n    return `${this.nombre} ${this.apellido} ${this.dni}` ;\r\n  }\r\n\r\n  nombre!: string;\r\n  apellido!: string;\r\n  dni!: number;\r\n  direccion!: string;\r\n  tel!: string;\r\n\r\n  constructor(){\r\n    super();\r\n  }\r\n\r\n  override get endPoint(): string {\r\n    return \"companeros\";\r\n  }\r\n\r\n}\r\n","import { BaseEntity } from \"./BaseEntity\";\r\n\r\nexport class Eleccion extends BaseEntity {\r\n  public static override endURL(): string {\r\n      return \"elecciones\";\r\n  }\r\n\r\n  nombre!: string;\r\n  fecha!: Date;\r\n\r\n  constructor(){\r\n    super();\r\n\r\n  }\r\n  override get endPoint(): string {\r\n    return \"elecciones\";\r\n  }\r\n  override getFilterText(): string {\r\n    return `${this.nombre} ` ;\r\n  }\r\n\r\n}\r\n","import { BaseEntity } from \"./BaseEntity\";\r\nimport { MesasElectoral } from \"./MesaElectoral\";\r\n\r\nexport class Escuela extends BaseEntity {\r\n\r\n\r\n  nombre!: string;\r\n  direccion!: string;\r\n  MesaElectorals: MesasElectoral[] = [];\r\n  constructor(){\r\n    super();\r\n\r\n  }\r\n  override get endPoint(): string {\r\n    return \"escuelas\";\r\n  }\r\n\r\n  override getFilterText(): string {\r\n    return `${this.nombre}` ;\r\n  }\r\n\r\n}\r\n","import { BaseEntity } from \"./BaseEntity\";\r\n\r\nexport class Partido extends BaseEntity{\r\n  override getFilterText(): string {\r\n    return `${this.nombre} ` ;\r\n  }\r\n\r\n  nombre!: string;\r\n\r\n  constructor(){\r\n    super();\r\n  }\r\n\r\n  override get endPoint(): string {\r\n    return \"partidos\";\r\n  }\r\n\r\n}\r\n"],"x_google_ignoreList":[]}